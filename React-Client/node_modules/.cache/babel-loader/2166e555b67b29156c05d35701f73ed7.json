{"ast":null,"code":"import React from'react';import ReactPlayer from'react-player';import'./index.css';import ContentNavi from'../../Components/Navbar/ContentNavi';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Identifires=function Identifires(){return/*#__PURE__*/_jsxs(\"div\",{className:\"Content\",children:[/*#__PURE__*/_jsx(ContentNavi,{}),/*#__PURE__*/_jsx(\"h1\",{children:\"C# Identifiers\"}),/*#__PURE__*/_jsx(\"br\",{}),\" \",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"p\",{children:\"In programming languages, identifiers are used for identification purposes. Or in other words, identifiers are the user-defined name of the program components. In C#, an identifier can be a class name, method name, variable name or label.\"}),/*#__PURE__*/_jsx(\"h3\",{children:\"Rules for defining identifiers in C#:\"}),/*#__PURE__*/_jsx(\"p\",{children:\"There are certain valid rules for defining a valid C# identifier. These rules should be followed, otherwise, we will get a compile-time error. \"}),/*#__PURE__*/_jsxs(\"ul\",{children:[/*#__PURE__*/_jsx(\"li\",{children:\"The only allowed characters for identifiers are all alphanumeric characters([A-Z], [a-z], [0-9]), \\u2018_\\u2018 (underscore). For example \\u201Cgeek@\\u201D is not a valid C# identifier as it contain \\u2018@\\u2019 \\u2013 special character.\"}),/*#__PURE__*/_jsx(\"li\",{children:\"Identifiers should not start with digits([0-9]). For example \\u201C123geeks\\u201D is a not a valid in C# identifier.\"}),/*#__PURE__*/_jsx(\"li\",{children:\"Identifiers should not contain white spaces.\"}),/*#__PURE__*/_jsx(\"li\",{children:\"C# identifiers are case-sensitive.\"}),/*#__PURE__*/_jsx(\"li\",{children:\"C# identifiers allow Unicode Characters.\"}),/*#__PURE__*/_jsx(\"li\",{children:\"Identifiers are not allowed to use as keyword unless they include @ as a prefix. For example, @as is a valid identifier, but \\u201Cas\\u201D is not because it is a keyword.\"}),/*#__PURE__*/_jsx(\"li\",{children:\"C# identifiers cannot contain more than 512 characters.\"}),/*#__PURE__*/_jsx(\"li\",{children:\"Identifiers does not contain two consecutive underscores in its name because such types of identifiers are used for the implementation.\"})]}),/*#__PURE__*/_jsx(\"div\",{className:\"player\",controls:true,children:/*#__PURE__*/_jsx(ReactPlayer,{url:\"https://www.youtube.com/watch?v=ctF7cdGdy68\"})})]});};export default Identifires;","map":{"version":3,"sources":["D:/Final_Project/PGDAC/PGDAC-Final-E-Learning-Frontend/my-app/src/Pages/ChapterContent/CsharpIdentifiers.js"],"names":["React","ReactPlayer","ContentNavi","Identifires"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,WAAP,KAAwB,cAAxB,CACA,MAAO,aAAP,CACA,MAAOC,CAAAA,WAAP,KAAwB,qCAAxB,C,wFAGA,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,EAAM,CACxB,mBACE,aAAK,SAAS,CAAC,SAAf,wBACE,KAAC,WAAD,IADF,cAEK,sCAFL,cAGK,aAHL,kBAGW,aAHX,cAKI,qQALJ,cAOI,6DAPJ,cAQI,sKARJ,cASI,mCACI,sQADJ,cAEI,4IAFJ,cAGI,oEAHJ,cAII,0DAJJ,cAKI,gEALJ,cAMI,mMANJ,cAOI,+EAPJ,cAQI,+JARJ,GATJ,cAoBI,YAAK,SAAS,CAAC,QAAf,CAAwB,QAAQ,KAAhC,uBACQ,KAAC,WAAD,EAAa,GAAG,CAAC,6CAAjB,EADR,EApBJ,GADF,CAqCD,CAtCD,CAwCA,cAAeA,CAAAA,WAAf","sourcesContent":["import React from 'react'\r\nimport ReactPlayer from 'react-player';\r\nimport './index.css'\r\nimport ContentNavi from '../../Components/Navbar/ContentNavi';\r\n\r\n\r\nconst Identifires = () => {\r\n  return (\r\n    <div className='Content'>\r\n      <ContentNavi/>\r\n         <h1>C# Identifiers</h1>\r\n         <br/> <br/>\r\n         \r\n        <p>In programming languages, identifiers are used for identification purposes. Or in other words, identifiers are the user-defined name of the program components. In C#, an identifier can be a class name, method name, variable name or label.</p>\r\n\r\n        <h3>Rules for defining identifiers in C#:</h3>\r\n        <p>There are certain valid rules for defining a valid C# identifier. These rules should be followed, otherwise, we will get a compile-time error. </p>\r\n        <ul>\r\n            <li>The only allowed characters for identifiers are all alphanumeric characters([A-Z], [a-z], [0-9]), ‘_‘ (underscore). For example “geek@” is not a valid C# identifier as it contain ‘@’ – special character.</li>\r\n            <li>Identifiers should not start with digits([0-9]). For example “123geeks” is a not a valid in C# identifier.</li>\r\n            <li>Identifiers should not contain white spaces.</li>\r\n            <li>C# identifiers are case-sensitive.</li>\r\n            <li>C# identifiers allow Unicode Characters.</li>\r\n            <li>Identifiers are not allowed to use as keyword unless they include @ as a prefix. For example, @as is a valid identifier, but “as” is not because it is a keyword.</li>\r\n            <li>C# identifiers cannot contain more than 512 characters.</li>\r\n            <li>Identifiers does not contain two consecutive underscores in its name because such types of identifiers are used for the implementation.</li>\r\n        </ul>\r\n\r\n        <div className='player' controls>\r\n                <ReactPlayer url='https://www.youtube.com/watch?v=ctF7cdGdy68'/>\r\n            </div>\r\n\r\n        \r\n        \r\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Identifires;"]},"metadata":{},"sourceType":"module"}